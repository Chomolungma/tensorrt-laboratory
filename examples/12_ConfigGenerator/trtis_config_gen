#!/usr/bin/env python3
import os
import pathlib
import shutil

from contextlib import contextmanager

import click
import config_generator as cg

FileType = click.Path(exists=True, file_okay=True, dir_okay=False, resolve_path=True)
PathType = click.Path(exists=True, file_okay=False, dir_okay=True, resolve_path=True)

@contextmanager
def cd(newdir):
    prevdir = os.getcwd()
    os.chdir(os.path.expanduser(newdir))
    try:
        yield
    finally:
        os.chdir(prevdir)

# Path(exists=False, file_okay=True, dir_okay=True, writable=False, readable=True, resolve_path=False)

class ModelStore:

    def __init__(self, *, path, create=False, validate=False):
        if not os.path.isdir(path):
            pathlib.Path(path).mkdir(parents=create, exist_ok=create)
        self.path = os.path.abspath(path)
        self.name = os.path.basename(self.path)

    def add_tensorrt_engine(self, *, engine, name=None, concurrency=1, version=0):
        engine = os.path.abspath(engine)
        if not os.path.isfile(engine):
            raise RuntimeError("{} does not exist".format(engine))
        base = os.path.basename(engine)
        model = name or base.replace(".engine", "")
        model_path = os.path.join(self.path, model)
        engine_path = os.path.join(model_path, str(version))
        if os.path.exists(engine_path):
            raise RuntimeError("{} already exists in the model store".format(model))
        config = cg.tensorrt_engine(model, engine, concurrency)
        pathlib.Path(engine_path).mkdir(parents=True, exist_ok=True)
        shutil.copy(engine, engine_path)
        with cd(engine_path):
            os.symlink(os.path.basename(engine), "model.plan")
        with cd(model_path), open("config.pbtxt", "w") as file:
            file.write(config)
        print("added model config to the model store:")
        print(config)

@click.command()
@click.option("--engine", type=FileType, required=True)
@click.option("--concurrency", type=int, default=1)
@click.option("--name", default=None)
@click.option("--store", type=FileType, default=None)
def main(engine, concurrency, name, store):
    store = ModelStore(path="model-store")
    base = os.path.basename(engine)
    name = name or base.replace(".engine", "")
    store.add_tensorrt_engine(engine=engine, name=name, concurrency=concurrency)

if __name__ == "__main__":
    main()
